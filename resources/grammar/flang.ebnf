/* Can be used as input for "https://bottlecaps.de/rr/ui" to generate syntax graphs */

/* Naive, Type 2 but not LL1 without precedences */
Program          ::= (Definition ";")+
Definition       ::= variableName+ "=" Expression
LocalDefinitions ::= LocalDefinition (";" LocalDefinition)*
LocalDefinition  ::= variableName "=" Expression
Expression       ::= ( "let" LocalDefinitions "in" | "if" Expression "then" Expression "else" | UnaryOp ) Expression
                   | "(" Expression ")"
                   | AtomicExpression
                   | Expression (BinaryOp)? Expression
BinaryOp         ::= "&" | "|" | "==" | "<" | "+" | "-" | "*" | "/"
UnaryOp          ::= "not" | "-"
AtomicExpression ::= variableName | number | boolean

/* LL1 with operator precedences */
Program                  ::= (Definition ";")+
Definition               ::= variableName+ "=" Expression
LocalDefinitions         ::= LocalDefinition (";" LocalDefinition)*
LocalDefinition          ::= variableName "=" Expression
Expression               ::= DisjunctionExpression
                           | ( "let" LocalDefinitions "in" | "if" Expression "then" Expression "else" ) Expression
DisjunctionExpression    ::= ConjunctionExpression ("|" DisjunctionExpression)?
ConjunctionExpression    ::= NegationExpression ("&" ConjunctionExpression)?
NegationExpression       ::= ("not")? SmallerEqualsExpression
SmallerEqualsExpression  ::= UnaryMinusExpression (("<" | "==") SmallerEqualsExpression)?
UnaryMinusExpression     ::= ("-")? BinaryMinusExpression
BinaryMinusExpression    ::= AdditionExpression ("-" BinaryMinusExpression)?
AdditionExpression       ::= DivisionExpression ("+" AdditionExpression)?
DivisionExpression       ::= MultiplicationExpression ("/" DivisionExpression)?
MultiplicationExpression ::= ApplicationExpression ("*" MultiplicationExpression)?
ApplicationExpression    ::= BracketedExpression+
BracketedExpression      ::= AtomicExpression
                           | "(" Expression ")"
AtomicExpression         ::= variableName | number | boolean